WHITESPACE = _{ " " | NEWLINE }

add = { "+" }
sub = { "-" }
mul = { "*" }
div = { "/" }
pow = { "^" }
abs = { "%" }
grt = { ">" }
lst = { "<" }
gre = { ">=" }
lse = { "<=" }
equals = { "=" }
eqequals = { "==" }
comma = { "," }
dotdot = { ".." }
lparen = _{ "(" }
rparen = _{ ")" }
lcurlb = { "{" }
rcurlb = { "}" }
lsquarb = { "[" }
rsquarb = { "]" }
rarrow = { "=>" }
accessop = _{ "->" }
bar = { "|" }
fact = { "!" }
tilde = { "~" }
letk = _{ "let" }

number = ${ ("-"* ~ (ASCII_DIGIT)+ ~ ("." ~ ASCII_DIGIT+)* ~ "i"?) | "i" }
identifier = ${ !letk ~ ASCII_ALPHANUMERIC+ }

string = ${ "\"" ~ strcontent ~ "\"" }
strcontent = @{ char* }
char = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "n" | "r" | "t")
}

array = { lsquarb ~ ((expression ~ (comma ~ expression)+) | expression?) ~ rsquarb }
index = { lsquarb ~ expression ~ rsquarb }

high_prec_op = _{ (mul | div | abs | grt | lst | gre | lse | eqequals) }

arg_list = { lparen ~ (expression ~ comma)* ~ expression? ~ rparen }
func_call = { identifier ~ arg_list }

value = { ((rloop | func_call | parens | number | identifier | array | string) ~ index* ~ fact* ~ (pow ~ value)*) ~ (accessop ~ identifier)* }
term = { value ~ (high_prec_op ~ term)* }
parens = _{ lparen ~ expression ~ rparen }

expression = { (((term ~ ((add | sub) ~ term)*) | negation_expression) ~ conditional?) }
negation_expression = { "-" ~ expression }

param_list = { lparen ~ identifier ~ (comma ~ identifier)* ~ rparen }
func_decl = { letk ~ identifier ~ param_list ~ equals ~ expression_or_tree }

var_decl = { letk ~ identifier ~ equals ~ expression_or_tree }

param = { identifier ~ (tilde ~ identifier)? }
type_decl = { letk ~ identifier ~ equals ~ lst ~ param ~ (comma ~ param)* ~ grt }

assignment = { identifier ~ equals ~ (identifier ~ equals)* ~ expression_or_tree }

tree = { lcurlb ~ action+ ~ rcurlb }
expression_or_tree = _{ (tree | expression) }

conditional = { rarrow ~ expression_or_tree ~ bar ~ expression_or_tree }

rloop = { identifier ~ ":" ~ range ~ rarrow ~ expression_or_tree }
range = { lsquarb ~ expression ~ dotdot ~ expression ~ comma ~ sub? ~ expression ~ rsquarb }

action = _{
    func_decl
    | type_decl
    | var_decl
    | rloop
    | assignment
    | expression_or_tree
}

file = { SOI ~ action* ~ EOI }